language ESSENCE' 1.0

letting HORIZON be 10
find actions_ExplicitBounded_Length: int(0..10)
find actions_ExplicitBounded_Values_1: matrix indexed by [int(1..10)] of int(3, 5, 8)
find actions_ExplicitBounded_Values_2: matrix indexed by [int(1..10)] of int(3, 5, 8)
find actions_ExplicitBounded_Values_3: matrix indexed by [int(1..10)] of int(1..8)
find states_ExplicitBoundedR9_Length: int(0..10)
find states_ExplicitBoundedR9_Values_Function1D: matrix indexed by [int(1..10), int(3, 5, 8)] of int(0..8)
find nbActions: int(0..10)
minimising nbActions
such that
    actions_ExplicitBounded_Length = states_ExplicitBoundedR9_Length - 1,
    and([q86 <= actions_ExplicitBounded_Length ->
         actions_ExplicitBounded_Values_1[q86] != actions_ExplicitBounded_Values_2[q86]
             | q86 : int(1..10)]),
    and([q34 <= actions_ExplicitBounded_Length ->
         actions_ExplicitBounded_Values_3[q34] <=
         sum([toInt(q32 = actions_ExplicitBounded_Values_1[q34]) *
              catchUndef(toInt(q34 <= states_ExplicitBoundedR9_Length) *
                         catchUndef(states_ExplicitBoundedR9_Values_Function1D[q34, q32], 0),
                         0)
                  | q32 : int(3, 5, 8)])
         /\
         or([q34 <= states_ExplicitBoundedR9_Length /\ q31 = actions_ExplicitBounded_Values_1[q34]
                 | q31 : int(3, 5, 8)])
             | q34 : int(1..10)]),
    and([q10 <= states_ExplicitBoundedR9_Length ->
         and([sum([states_ExplicitBoundedR9_Values_Function1D[q10, q11] | q11 : int(3, 5, 8), q11 = b]) <= b /\
              or([q12 = b | q12 : int(3, 5, 8)])
                  | b : int(3, 5, 8)])
             | q10 : int(1..10)]),
    and([q46 <= actions_ExplicitBounded_Length ->
         sum([toInt(q39 = actions_ExplicitBounded_Values_1[q46]) *
              catchUndef(toInt(q46 <= states_ExplicitBoundedR9_Length) *
                         catchUndef(states_ExplicitBoundedR9_Values_Function1D[q46, q39], 0),
                         0)
                  | q39 : int(3, 5, 8)])
         - actions_ExplicitBounded_Values_3[q46]
         =
         sum([toInt(q44 = actions_ExplicitBounded_Values_1[q46]) *
              catchUndef(toInt(q46 + 1 <= states_ExplicitBoundedR9_Length) *
                         catchUndef(states_ExplicitBoundedR9_Values_Function1D[q46 + 1, q44], 0),
                         0)
                  | q44 : int(3, 5, 8)])
         /\
         or([q46 <= states_ExplicitBoundedR9_Length /\ q38 = actions_ExplicitBounded_Values_1[q46]
                 | q38 : int(3, 5, 8)])
         /\
         or([q46 + 1 <= states_ExplicitBoundedR9_Length /\ q43 = actions_ExplicitBounded_Values_1[q46]
                 | q43 : int(3, 5, 8)])
             | q46 : int(1..10)]),
    and([q58 <= actions_ExplicitBounded_Length ->
         sum([toInt(q51 = actions_ExplicitBounded_Values_2[q58]) *
              catchUndef(toInt(q58 <= states_ExplicitBoundedR9_Length) *
                         catchUndef(states_ExplicitBoundedR9_Values_Function1D[q58, q51], 0),
                         0)
                  | q51 : int(3, 5, 8)])
         + actions_ExplicitBounded_Values_3[q58]
         =
         sum([toInt(q56 = actions_ExplicitBounded_Values_2[q58]) *
              catchUndef(toInt(q58 + 1 <= states_ExplicitBoundedR9_Length) *
                         catchUndef(states_ExplicitBoundedR9_Values_Function1D[q58 + 1, q56], 0),
                         0)
                  | q56 : int(3, 5, 8)])
         /\
         or([q58 <= states_ExplicitBoundedR9_Length /\ q50 = actions_ExplicitBounded_Values_2[q58]
                 | q50 : int(3, 5, 8)])
         /\
         or([q58 + 1 <= states_ExplicitBoundedR9_Length /\ q55 = actions_ExplicitBounded_Values_2[q58]
                 | q55 : int(3, 5, 8)])
             | q58 : int(1..10)]),
    and([q26 <= actions_ExplicitBounded_Length ->
         and([!(actions_ExplicitBounded_Values_1[q26] = b \/ actions_ExplicitBounded_Values_2[q26] = b) ->
              and([sum([toInt(q26 <= states_ExplicitBoundedR9_Length) *
                        catchUndef(states_ExplicitBoundedR9_Values_Function1D[q26, q22], 0)
                            | q22 : int(3, 5, 8), q22 = b])
                   =
                   sum([toInt(q26 + 1 <= states_ExplicitBoundedR9_Length) *
                        catchUndef(states_ExplicitBoundedR9_Values_Function1D[q26 + 1, q17], 0)
                            | q17 : int(3, 5, 8), q17 = b]),
                   or([q26 <= states_ExplicitBoundedR9_Length /\ q21 = b | q21 : int(3, 5, 8)]),
                   or([q26 + 1 <= states_ExplicitBoundedR9_Length /\ q16 = b | q16 : int(3, 5, 8)]);
                       int(1..3)])
                  | b : int(3, 5, 8)])
             | q26 : int(1..10)]),
    and([q70 <= actions_ExplicitBounded_Length ->
         sum([toInt(q63 = actions_ExplicitBounded_Values_1[q70]) *
              catchUndef(toInt(q70 + 1 <= states_ExplicitBoundedR9_Length) *
                         catchUndef(states_ExplicitBoundedR9_Values_Function1D[q70 + 1, q63], 0),
                         0)
                  | q63 : int(3, 5, 8)])
         = 0
         /\
         or([q70 + 1 <= states_ExplicitBoundedR9_Length /\ q62 = actions_ExplicitBounded_Values_1[q70]
                 | q62 : int(3, 5, 8)])
         \/
         sum([toInt(q68 = actions_ExplicitBounded_Values_2[q70]) *
              catchUndef(toInt(q70 + 1 <= states_ExplicitBoundedR9_Length) *
                         catchUndef(states_ExplicitBoundedR9_Values_Function1D[q70 + 1, q68], 0),
                         0)
                  | q68 : int(3, 5, 8)])
         = actions_ExplicitBounded_Values_2[q70]
         /\
         or([q70 + 1 <= states_ExplicitBoundedR9_Length /\ q67 = actions_ExplicitBounded_Values_2[q70]
                 | q67 : int(3, 5, 8)])
             | q70 : int(1..10)]),
    and([sum([sum([0 | 3 = q72]), sum([0 | 5 = q72]), sum([8 | 8 = q72]); int(1..3)]) =
         states_ExplicitBoundedR9_Values_Function1D[1, q72]
         /\ or([3 = q72, 5 = q72, 8 = q72; int(1..3)])
             | q72 : int(3, 5, 8)]),
    states_ExplicitBoundedR9_Values_Function1D[1, 3] = 0,
    states_ExplicitBoundedR9_Values_Function1D[1, 5] = 0,
    states_ExplicitBoundedR9_Values_Function1D[1, 8] = 8,
    1 <= states_ExplicitBoundedR9_Length,
    and([sum([sum([0 | 3 = q79]), sum([4 | 5 = q79]), sum([4 | 8 = q79]); int(1..3)]) =
         states_ExplicitBoundedR9_Values_Function1D[states_ExplicitBoundedR9_Length, q79]
         /\ or([3 = q79, 5 = q79, 8 = q79; int(1..3)])
             | q79 : int(3, 5, 8)]),
    states_ExplicitBoundedR9_Values_Function1D[states_ExplicitBoundedR9_Length, 3] = 0,
    states_ExplicitBoundedR9_Values_Function1D[states_ExplicitBoundedR9_Length, 5] = 4,
    states_ExplicitBoundedR9_Values_Function1D[states_ExplicitBoundedR9_Length, 8] = 4,
    states_ExplicitBoundedR9_Length <= states_ExplicitBoundedR9_Length,
    nbActions = actions_ExplicitBounded_Length,
    and([q1 > actions_ExplicitBounded_Length ->
         and([actions_ExplicitBounded_Values_1[q1] = 3, actions_ExplicitBounded_Values_2[q1] = 3,
              actions_ExplicitBounded_Values_3[q1] = 1;
                  int(1..3)])
             | q1 : int(1..10)]),
    actions_ExplicitBounded_Length <= 10,
    and([q3 > states_ExplicitBoundedR9_Length ->
         and([states_ExplicitBoundedR9_Values_Function1D[q3, q27] = 0 | q27 : int(3, 5, 8)])
             | q3 : int(1..10)]),
    states_ExplicitBoundedR9_Length <= 10

$ Conjure's
$ {"finds": [{"Name": "actions"}, {"Name": "states"}, {"Name": "nbActions"}],
$  "givens": [],
$  "enumGivens": [],
$  "enumLettings": [],
$  "lettings": [[{"Name": "buckets"},
$                {"Domain": {"DomainInt": [{"RangeSingle": {"Constant": {"ConstantInt": 3}}},
$                                          {"RangeSingle": {"Constant": {"ConstantInt": 5}}},
$                                          {"RangeSingle": {"Constant": {"ConstantInt": 8}}}]}}],
$               [{"Name": "initialState"},
$                {"Constant": {"ConstantAbstract": {"AbsLitFunction": [[{"ConstantInt": 3}, {"ConstantInt": 0}],
$                                                                      [{"ConstantInt": 5}, {"ConstantInt": 0}],
$                                                                      [{"ConstantInt": 8}, {"ConstantInt": 8}]]}}}],
$               [{"Name": "finalState"},
$                {"Constant": {"ConstantAbstract": {"AbsLitFunction": [[{"ConstantInt": 3}, {"ConstantInt": 0}],
$                                                                      [{"ConstantInt": 5}, {"ConstantInt": 4}],
$                                                                      [{"ConstantInt": 8}, {"ConstantInt": 4}]]}}}],
$               [{"Name": "HORIZON"}, {"Constant": {"ConstantInt": 10}}],
$               [{"MachineName": ["let", 1, []]},
$                {"Op": {"MkOpMax": {"Domain": {"DomainInt": [{"RangeSingle": {"Constant": {"ConstantInt": 3}}},
$                                                             {"RangeSingle": {"Constant": {"ConstantInt": 5}}},
$                                                             {"RangeSingle": {"Constant": {"ConstantInt": 8}}}]}}}}]],
$  "unnameds": [],
$  "strategyQ": {"PickFirst": []},
$  "strategyA": {"PickAll": []},
$  "trailCompact": [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1]],
$  "trailVerbose": [],
$  "trailRewrites": [],
$  "nameGenState": [["let", 2], ["q", 87]],
$  "nbExtraGivens": 0,
$  "representations": [[{"Name": "nbActions"},
$                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                        {"Reference": [{"Name": "HORIZON"},
$                                                                       {"Alias": {"Constant": {"ConstantInt": 10}}}]}]}]}],
$                      [{"Name": "actions"},
$                       {"DomainSequence": [{"Sequence_ExplicitBounded": []},
$                                           [{"SizeAttr_MaxSize": {"Constant": {"ConstantInt": 10}}},
$                                            "JectivityAttr_None"],
$                                           {"DomainTuple": [{"DomainInt": [{"RangeSingle": {"Constant": {"ConstantInt": 3}}},
$                                                                           {"RangeSingle": {"Constant": {"ConstantInt": 5}}},
$                                                                           {"RangeSingle": {"Constant": {"ConstantInt": 8}}}]},
$                                                            {"DomainInt": [{"RangeSingle": {"Constant": {"ConstantInt": 3}}},
$                                                                           {"RangeSingle": {"Constant": {"ConstantInt": 5}}},
$                                                                           {"RangeSingle": {"Constant": {"ConstantInt": 8}}}]},
$                                                            {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                             {"Constant": {"ConstantInt": 8}}]}]}]}]}],
$                      [{"Name": "states"},
$                       {"DomainSequence": [{"Sequence_ExplicitBounded": []},
$                                           [{"SizeAttr_MaxSize": {"Constant": {"ConstantInt": 10}}},
$                                            "JectivityAttr_None"],
$                                           {"DomainFunction": [{"Function_1D": []},
$                                                               [{"SizeAttr_None": []}, "PartialityAttr_Total",
$                                                                "JectivityAttr_None"],
$                                                               {"DomainInt": [{"RangeSingle": {"Constant": {"ConstantInt": 3}}},
$                                                                              {"RangeSingle": {"Constant": {"ConstantInt": 5}}},
$                                                                              {"RangeSingle": {"Constant": {"ConstantInt": 8}}}]},
$                                                               {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                                                {"Constant": {"ConstantInt": 8}}]}]}]}]}]],
$  "representationsTree": [[{"Name": "actions"},
$                           [{"rootLabel": {"Sequence_ExplicitBounded": []},
$                             "subForest": [{"rootLabel": null,
$                                            "subForest": [{"rootLabel": null,
$                                                           "subForest": []},
$                                                          {"rootLabel": null,
$                                                           "subForest": []},
$                                                          {"rootLabel": null,
$                                                           "subForest": []}]}]}]],
$                          [{"Name": "nbActions"},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"Name": "states"},
$                           [{"rootLabel": {"Sequence_ExplicitBounded": []},
$                             "subForest": [{"rootLabel": {"Function_1D": []},
$                                            "subForest": [{"rootLabel": null,
$                                                           "subForest": []},
$                                                          {"rootLabel": null,
$                                                           "subForest": []}]}]}]]],
$  "originalDomains": [[{"Name": "actions"},
$                       {"DomainSequence": [[],
$                                           [{"SizeAttr_MaxSize": {"Reference": [{"Name": "HORIZON"}, null]}},
$                                            "JectivityAttr_None"],
$                                           {"DomainTuple": [{"DomainInt": [{"RangeSingle": {"Constant": {"ConstantInt": 3}}},
$                                                                           {"RangeSingle": {"Constant": {"ConstantInt": 5}}},
$                                                                           {"RangeSingle": {"Constant": {"ConstantInt": 8}}}]},
$                                                            {"DomainInt": [{"RangeSingle": {"Constant": {"ConstantInt": 3}}},
$                                                                           {"RangeSingle": {"Constant": {"ConstantInt": 5}}},
$                                                                           {"RangeSingle": {"Constant": {"ConstantInt": 8}}}]},
$                                                            {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                             {"Constant": {"ConstantInt": 8}}]}]}]}]}],
$                      [{"Name": "states"},
$                       {"DomainSequence": [[],
$                                           [{"SizeAttr_MaxSize": {"Reference": [{"Name": "HORIZON"}, null]}},
$                                            "JectivityAttr_None"],
$                                           {"DomainFunction": [[],
$                                                               [{"SizeAttr_None": []}, "PartialityAttr_Total",
$                                                                "JectivityAttr_None"],
$                                                               {"DomainInt": [{"RangeSingle": {"Constant": {"ConstantInt": 3}}},
$                                                                              {"RangeSingle": {"Constant": {"ConstantInt": 5}}},
$                                                                              {"RangeSingle": {"Constant": {"ConstantInt": 8}}}]},
$                                                               {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                                                {"Reference": [{"MachineName": ["let",
$                                                                                                                                1,
$                                                                                                                                []]},
$                                                                                                               null]}]}]}]}]}],
$                      [{"Name": "nbActions"},
$                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                        {"Reference": [{"Name": "HORIZON"}, null]}]}]}]],
$  "questionAnswered": []}
