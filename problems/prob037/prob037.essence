language ESSENCE 1.2.0
$ prob037.essence: Peg Solitaire
$ Problem details available at http://www.csplib.org/prob/prob037/
$ 04 September 2007
$

$ x_size: the width of the board
$ y_size: the height of the board
given x_size, y_size : int(1..)

$ X: representation of x coordinates
$ Y: representation of y coordinates
$ Hole: representation of a hole on the board
$ Move: representation of a move. the first element specifies the peg's original
$       position. the second element specifies the peg's new position
letting X be domain int(1..x_size),
        Y be domain int(1..y_size),
        Hole be domain tuple (X,Y),
        Move be domain tuple (Hole,Hole)

$ board: the holes that make up the board
$ init: all holes where a peg is present in the initial state
$ goal: all holes where a peg is present in the goal state
given board, init, goal : set of Hole

$ all holes in the init and goal states are part of the board
where forAll h in init union goal . h in board

$ plan: a sequence of states representing the game plan. the maximum length is
$       the number of pegs on the board
$ moves: a sequence of moves representing the game plan. the maximum length is
$        the number of pegs on the board, less 1
find plan : function int(1..|board|) --> set of Hole,
     moves : function int(1..|board|-1) --> Move

such that
$ plan and move are sequences
    forAll i in defined(plan) . i=1 \/ (i-1) in defined(plan),
$ the states before and after a move contain pegs in the correct positions
    forAll (t,((x1,y1),(x2,y2))) in moves
        .  (x1,y1) in plan(t)
        /\ !((x1,y1) in plan(t+1))
        /\ !((x2,y2) in plan(t))
        /\ (x2,y2) in plan(t+1)
        /\ ((x1+x2)/2,(y1+y2)/2) in plan(t)
        /\ !(((x1+x2)/2,(y1+y2)/2) in plan(t+1)),
$ all states contain only holes that are on the board
    forAll s in range(plan) . forAll h in s . h in board,
$ pegs only move horizontally or vertically, and only jump one peg
    forAll ((x1,y1),(x2,y2)) in range(moves) . |x1-x2| = 2 /\ |y1-y2| = 0 \/
                                               |x1-x2| = 0 /\ |y1-y2| = 2,
$ the only pegs that change are those specified by a move
    forAll t : int(1..|board|) . t <= |plan|-1 -> |plan(t)| - |plan(t+1)| = 1,
$ start in the initial state
    plan(1) = init,
$ finish in the goal state
    plan(|plan|) = goal
