language Essence 1.3
$ prob037: Peg Solitaire
$ http://www.cs.st-andrews.ac.uk/~ianm/CSPLib/prob/prob037/index.html
$ Modelling and Solving English Peg Solitaire

letting Dom be domain int(0..6)
letting Peg be domain (Dom,Dom)

letting numPegs  be 32
letting maxSteps be 31
letting Num be domain int(0..maxSteps)

given hole, end: Peg
$letting hole be (3,3)
$letting end  be (3,3)

find steps: function(total) Num --> set (minSize 1, maxSize 32) of Peg

such that

$ Starting: middle long part
forAll i : Dom .
    forAll j : int(2..4), (i,j) != hole .
        (i,j) in steps(0),

$ Starting: upper
forAll i : int(2..4) .
    forAll j : int(0..1) .
        (i,j) in steps(0),

$ Starting: lower
forAll i : int(2..4) .
    forAll j : int(5..6) .
        (i,j) in steps(0),

$ End position
steps(31) = {end},

$ A single peg is removed each time
forAll i : int(0..maxSteps-1) .
    |steps(i)| = numPegs - i  /\
    |steps(i) intersect steps(i+1)| = |steps(i)| - 2,

$ Only allow valid moves
forAll i : int(0..maxSteps-1) .  
   $ The positions of the peg that was moved.
   exists fro,to : Peg .
    fro in steps(i)   /\ !(fro in steps(i+1) )  /\
    to  in steps(i+1) /\ !(to in steps(i) )    

    /\ (to[1] <2 \/ to[1] > 4  -> to[2] >= 2 \/ to[2] <=4 )
    /\ (to[2] <2 \/ to[2] > 4  -> to[1] >= 2 \/ to[1] <=4 )
    /\

    $ There was peg to jump over that has been removed
       (fro[1] + (to[1] - fro[1])/2, fro[2] + (to[2] - fro[2])/2 ) in steps(i) /\
    !( (fro[1] + (to[1] - fro[1])/2, fro[2] + (to[2] - fro[2])/2 ) in steps(i+1) )
