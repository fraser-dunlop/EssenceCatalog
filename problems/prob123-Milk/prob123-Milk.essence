language ESSENCE 1.2.0
$ prob123.essence: Milk Collection
$ Problem details available in:
$   Model Building in Mathematical Programming, 4th edition
$   H. P. Williams
$   Wiley, 1999
$
$ 27 July 2007
$

$ n_farms: the number of farms in the problem
$ capacity: the capacity of the tanker
given n_farms, capacity : int(1..)

$ Farm: each farm is represented as an integer between 2 and n_farms+1. the
$       depot is represented as the integer 1
letting Farm be domain int(1..n_farms+1)

$ small: the set of farms that are visited every other day
$ large: the set of farms that are visited every day
$ distance: a function that maps two farms to a distance measure
$ milk: the amount of milk a farm produces between collections
given small, large : set of Farm,
      distance : function (total) set (size 2) of Farm --> int(0..100),
      milk : function (total) Farm --> int(0..100)

where
$ all farms are either small or large, and the depot is not a farm
    forAll f : Farm . f != 1 <-> (f in small \/ f in large /\
                                   !(f in small /\ f in large)),
$ the depot does not produce any milk
    milk(1) = 0

$ odd: the order that each farm should be visited in on odd days
$ even: the order that each farm should be visited in on even days
find odd : function int(1..n_farms+2) --> Farm,
     even : function int(1..n_farms+2) --> Farm

$ minimise the total distance travelled
$ Ozgur: this is just wrong
$ minimising (sum i : int(1..|odd|-1) . distance({odd(i),odd(i+1)}))
$          + (sum i : int(1..|even|-1) . distance({even(i),even(i+1)}))

such that
$ the partial functions 'odd' and 'even' map integers between 1 and |odd| or
$ |even| to values, to ensure a correct sequence representation
$ $ Ozgur: this is just wrong
$     forAll i : int(1..|odd|) . i in defined(odd),
$     forAll i : int(1..|even|) . i in defined(even),
$ the first and last stops in both sequences are the depot
    odd(1) = 1,
    even(1) = 1,
    $odd(|odd|) = 1,
    $even(|even|) = 1,
$ all large farms are visited on both odd and even days
    forAll f in large . f in range(odd) intersect range(even),
$ all small farms are visited only every other day
    forAll f in small . f in range(odd) union range(even) /\
                        !(f in range(odd) intersect range(even)),
$ no farm is visited more than once a day
$ Ozgur: this is just wrong
    $ forAll i,j : int(2..|odd|-1) . odd(i) = odd(j) -> i = j,
    $ forAll i,j : int(2..|even|-1) . even(i) = even(j) -> i = j,
$ the amount of milk collected cannot exceed the tanker's capacity
    (sum f in range(odd) . milk(f)) <= capacity,
    (sum f in range(even) . milk(f)) <= capacity,
    true

