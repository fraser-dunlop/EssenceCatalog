language ESSENCE 1.2.0
$ prob131.essence: Production Line Sequencing
$ Problem details available in:
$   Constraint-Based Vehicle Assembly Line Sequencing
$   M. Bergen, P. van Beek, T. Carchrae
$   Proc. Advances in Artificial Intelligence: 14th Biennial Conference of the
$   Canadian Society for Computational Studies of Intelligence (AI 2001),
$   Ottawa, Canada, p. 88, 2001.
$
$ 10 August 2007
$

given maxLot : int

$ n_orders: the number of orders being placed
$ n_lines: the number of assembly lines
$ n_days: the number of non-zero capacity days
$ n_slots: the number of slots per day
$ batch_size: the number of items that should be placed into each batch
$ Arrtribute: an enumeration of attributes
given n_orders, n_lines, n_days, n_slots, batch_size: int(1..),
      Attribute new type enum

$ Order: an order is represented as an unnamed type
$ Attribute: an attribute is represented as an unnamed type
$ Line: an assembly line is represented as an unnamed type
$ Day: a day is represented as an unnamed type
$ Slot: a slot is represented as an unnamed type
letting Order be domain int(1..n_orders),
        Line be domain int(1..n_lines),
        Day be domain int(1..n_days),
        Slot be domain int(1..n_slots)

$ quantity: the quantity specified by each order
$ req_attr: the required attributes specified by each order
$ capacity: the number of batches that can be produced on each assembly line on
$           each day
$ line_attr: the set of attributes that each assembly line can provide
$ line_on: the earliest time an order may begin production
$ line_off: the latest time an order may be produced
$ dist_except: the distribution exception constraint... the minimum and maximum
$              number of batches with each attribute value that can be produced
$              on each day
$ earlier: the partial ordering over the powerset of Attribute. specifies in
$          which order each attribute combination should be produced. used for
$          the batting order constraint
given quantity : function (total) Order --> int(1..),
      req_attr : function (total) Order --> set of Attribute,
      capacity : function (total) tuple (Line,Day) --> int(1..),
      line_attr : function (total) Line --> set of Attribute,
      line_on : function (total) Order --> Day,
      line_off : function (total) Order --> Day,
      dist_except : function tuple (Day,Attribute) -->
                             set (size 2) of int(0..),
      earlier : relation of (set of Attribute * set of Attribute)

where
$ there is no excess capacity
    (sum e in defined(capacity) . (capacity(e))) * batch_size =
    sum o : Order . (quantity(o)),
$ earlier is a partial ordering
    forAll s1 : set of Attribute . earlier(s1,s1),
    forAll s1,s2 : set of Attribute . (earlier(s1,s2) /\ earlier(s2,s1)
                                       -> s1 = s2),
    forAll s1,s2,s3 : set of Attribute . (earlier(s1,s2) /\
                                          earlier(s2,s3) ->
                                          earlier(s1,s3))

$ Lot: a lot is represented as a pair, consisting of the order that it came from
$      and the number of items that it consists of
$ Batch: each batch has a unique identifier
letting Lot be domain tuple (Order,int(1..batch_size)),
        Batch be new type of size (sum e in defined(capacity) . (capacity(e)))

$ batches: each batch consists of a number of lots
$ batch_attr: the set of attributes that a batch requires
$ schedule: each slot on each day on each assembly line maps to a batch
find batches : function (total) Batch --> mset (maxSize maxLot) of Lot,
     batch_attr : function (total) Batch --> set of Attribute,
     schedule : function (total, injective) tuple (Line,Day,Slot) --> Batch

such that
$ the total number of items in an order's lots is equal to the number of items
$ in that order
    $ forAll o : Order . (sum b in defined(batches) .
    $                     sum (q) in toSet(batches(b))(o,_) .
    $                     q * freq(batches(b),(o,q))) = quantity(o),
$ a batch's attributes is the set of attributes that its lots require
    forAll b : Batch . forAll (o,q) in batches(b) .
        req_attr(o) subsetEq batch_attr(b),
    forAll b : Batch . forAll a in batch_attr(b) . exists (o,q) in batches(b) .
        a in req_attr(o),
$ assembly line constraint. each batch is assigned to an assembly line that can
$ provide its required attributes
    forAll (l,d,s) in defined(schedule) .
    forAll (o,q) in batches(schedule((l,d,s))) .
        req_attr(o) subsetEq line_attr(l),
$ line-on & line-off constraints. each batch is produced on or after its line-on
$ day, and on or before its line-off day
    forAll (l,d,s) in defined(schedule) .
    forAll (o,q) in batches(schedule((l,d,s))) .
        d >= line_on(o) /\ d <= line_off(o),
$ even distribution constraint. for each attribute, the number of batches
$ produced with that attribute differs by no more than one on any two days
    $ forAll l : Line . forAll a : Attribute . forAll d1,d2 : Day .
    $     !((d1,a) in defined(dist_except)) /\
    $     !((d2,a) in defined(dist_except))
    $     -> |(sum (s) in defined(schedule)(l,d1,_) .
    $                   (a in batch_attr(schedule((l,d1,s)))))
    $            - (sum (s) in defined(schedule)(l,d2,_) .
    $                   (a in batch_attr(schedule((l,d2,s)))))| <= 1,
$ distribution exception constraint
    $ forAll (d,a) in defined(dist_except) .
    $ sum (l,s) in defined(schedule)(_,d,_) . (a in batch_attr(schedule((l,d,s))))
    $     >= min(dist_except((d,a))) /\
    $ sum (l,s) in defined(schedule)(_,d,_) . (a in batch_attr(schedule((l,d,s))))
    $     <= max(dist_except((d,a))),
$ batting order constraint
    forAll l : Line . forAll d : Day . forAll s : int(1..n_slots-1) .
    earlier(batch_attr(schedule((l,d,s))),batch_attr(schedule((l,d,s+1))))

